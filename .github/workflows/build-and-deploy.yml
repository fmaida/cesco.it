
name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install system dependencies for image processing
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebp-dev \
          libavif-dev \
          libjpeg-dev \
          libpng-dev \
          zlib1g-dev

    - name: Set up Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-with-image-libs

    - name: Install dependencies and project
      run: poetry install --no-interaction

    - name: Verify Pillow features
      run: |
        poetry run python - <<'PY'
        from PIL import features
        import sys
        
        print("Pillow feature check:")
        print(f"JPEG: {features.check('jpg')}")
        print(f"WEBP: {features.check('webp')}")
        print(f"AVIF: {features.check('avif')}")
        
        if not features.check('webp'):
            print("⚠️  WEBP not supported!")
            sys.exit(1)
        if not features.check('avif'):
            print("⚠️  AVIF not supported!")
            sys.exit(1)
        print("✅ All image formats supported")
        PY

    - name: Build site
      run: poetry run build

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './build'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4